name: Deploy to EC2

on:
  push:
    branches:
      - master
      - test_deploy
    tags:
      - v*
      - dev*

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials for ECR Public (us-east-1)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR (server)
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Configure AWS credentials for main region
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION}}

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          target: app
          push: true
          tags: |
            ${{ vars.ECR_REPO_PREFIX }}/${{ vars.ECR_PROJECT_NAME }}/server:latest
            ${{ vars.ECR_REPO_PREFIX }}/${{ vars.ECR_PROJECT_NAME }}/server:${{ github.sha }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          tags: |
            ${{ vars.ECR_REPO_PREFIX }}/${{ vars.ECR_PROJECT_NAME }}/frontend:latest
            ${{ vars.ECR_REPO_PREFIX }}/${{ vars.ECR_PROJECT_NAME }}/frontend:${{ github.sha }}

      - name: Build and push scheduler image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          target: scheduler
          push: true
          tags: |
            ${{ vars.ECR_REPO_PREFIX }}/${{ vars.ECR_PROJECT_NAME }}/scheduler:latest
            ${{ vars.ECR_REPO_PREFIX }}/${{ vars.ECR_PROJECT_NAME }}/scheduler:${{ github.sha }}

      - name: Create docker-compose.prod.yaml from template
        env:
          ECR_REPO_PREFIX: ${{ vars.ECR_REPO_PREFIX }}
          ECR_PROJECT_NAME: ${{ vars.ECR_PROJECT_NAME }}
          EFS_ADDRESS: ${{ secrets.EFS_ADDRESS }}
          PUZZLE_GENERATION_SALT: ${{ secrets.PUZZLE_GENERATION_SALT }}
        run: |
          envsubst < docker-compose.prod.yaml.template > docker-compose.prod.yaml

      - name: Wait for all images to be available in ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          ECR_BASE=${{ vars.ECR_REPO_PREFIX }}/${{ vars.ECR_PROJECT_NAME }}
          REPOS=("server" "frontend" "scheduler")

          for REPO in "${REPOS[@]}"; do
            echo "=== Checking $ECR_BASE/$REPO via Docker Manifest API ==="
            MAX_ATTEMPTS=12
            for i in $(seq 1 $MAX_ATTEMPTS); do
              if docker manifest inspect "$ECR_BASE/$REPO:$IMAGE_TAG" > /dev/null 2>&1; then
                echo "✅ $ECR_BASE/$REPO: Image $IMAGE_TAG found via Docker Manifest API"

                SHA_DIGEST=$(docker manifest inspect "$ECR_BASE/$REPO:$IMAGE_TAG" | jq -r '.manifests[] | select(.platform.architecture != "unknown") | .digest')
                LATEST_DIGEST=$(docker manifest inspect "$ECR_BASE/$REPO:latest" | jq -r '.manifests[] | select(.platform.architecture != "unknown") | .digest')

                echo "Image SHA digest: $SHA_DIGEST"
                echo "Latest digest:    $LATEST_DIGEST"

                if [ "$SHA_DIGEST" = "$LATEST_DIGEST" ] && [ -n "$SHA_DIGEST" ]; then
                  echo "✅ $ECR_BASE/$REPO: latest tag points to the same image as $IMAGE_TAG"
                  break
                else
                  echo "⏳ $ECR_BASE/$REPO: latest tag not yet updated"
                fi
              else
                echo "⏳ $ECR_BASE/$REPO: Image $IMAGE_TAG not found via Docker Manifest API"
              fi

              if [ "$i" -eq 12 ]; then
                echo "❌ $ECR_BASE/$REPO: Timed out waiting for image"
                exit 1
              fi

              sleep 10
            done
          done

      - name: Copy docker-compose file to S3, then retrieve on EC2 via SSM
        run: |
          aws s3 cp docker-compose.prod.yaml s3://${{ secrets.S3_BUCKET }}/docker-compose.prod.yaml

          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Copy docker-compose.prod.yaml via S3 to EC2 and restart Docker" \
            --parameters commands="\
                cd /home/${{ secrets.EC2_USER }} && \
                aws s3 cp s3://${{ secrets.S3_BUCKET }}/docker-compose.prod.yaml docker-compose.yaml && \
                docker-compose pull --quiet && \
                docker-compose up --force-recreate -d" \
            --query 'Command.CommandId' \
            --output text \
          )

          echo "SSM command ID: $COMMAND_ID"

          # Wait for command to complete
          aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "${{ secrets.EC2_INSTANCE_ID }}" || true

          # Check if it actually succeeded
          STATUS=$(\
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
              --query 'Status' \
              --output text\
          )
          echo "SSM command status: $STATUS"

          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query '{stdout: StandardOutputContent, stderr: StandardErrorContent}' \
            --output json

          if [ "$STATUS" != "Success" ]; then
            exit 1
          fi

          echo "Deployment completed successfully."
