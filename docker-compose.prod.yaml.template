x-service-defaults: &service-defaults
  environment:
    - TZ=America/Chicago
  restart: unless-stopped

x-efs-driver-opts: &efs-driver-opts
  type: nfs
  o: addr=${EFS_ADDRESS},nfsvers=4.1

services:
  # The FastAPI backend service
  api:
    <<: *service-defaults
    image: ${ECR_REPO_PREFIX}/${ECR_PROJECT_NAME}/server:latest
    environment:
      - PUZZLE_GENERATION_SALT=${PUZZLE_GENERATION_SALT}
    volumes:
      # Mount a named volume to persist the SQLite database.
      - db-data:/code/data
    depends_on:
      redis:
        condition: service_healthy
    # The healthcheck ensures the 'api' service is actually running and healthy
    # before other services (like the frontend) that depend on it start.
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "--output", "/dev/null", "http://localhost:8000/api/config"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 10s

  scheduler:
    <<: *service-defaults
    image: ${ECR_REPO_PREFIX}/${ECR_PROJECT_NAME}/scheduler:latest
    environment:
      - PUZZLE_GENERATION_SALT=${PUZZLE_GENERATION_SALT}
    volumes:
      - db-data:/code/data

  # The Caddy service that builds and serves the React frontend
  frontend:
    <<: *service-defaults
    image: ${ECR_REPO_PREFIX}/${ECR_PROJECT_NAME}/frontend:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy-data:/data
      - caddy-data:/config
    depends_on:
      api:
        condition: service_healthy

  # The Redis service for caching API responses
  redis:
    <<: *service-defaults
    image: redis:8.2-alpine
    command: redis-server --maxmemory 50mb --maxmemory-policy allkeys-lru
    healthcheck:
      # This command checks if the Redis server is ready to accept commands.
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# Define the named volume for database persistence
volumes:
  db-data:
    driver: local
    driver_opts:
      <<: *efs-driver-opts
      device: :/db-data
  caddy-data:
    driver: local
    driver_opts:
      <<: *efs-driver-opts
      device: :/caddy-data
  caddy-config:
    driver: local
    driver_opts:
      <<: *efs-driver-opts
      device: :/caddy-config
